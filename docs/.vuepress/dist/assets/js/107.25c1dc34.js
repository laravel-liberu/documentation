(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{299:function(e,t,a){"use strict";a.r(t);var n=a(2),s=Object(n.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"multitenancy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multitenancy","aria-hidden":"true"}},[e._v("#")]),e._v(" Multitenancy")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.codacy.com/app/laravel-liberu/ActionLogger?utm_source=github.com&utm_medium=referral&utm_content=laravel-liberu/ActionLogger&utm_campaign=Badge_Grade",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://api.codacy.com/project/badge/Grade/dc3819bf2c654b3d8dcaaed8898b214f",alt:"Codacy Badge"}}),a("OutboundLink")],1),e._v(" "),a("a",{attrs:{href:"https://styleci.io/repos/85554059",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://styleci.io/repos/85554059/shield?branch=master",alt:"StyleCI"}}),a("OutboundLink")],1),e._v(" "),a("a",{attrs:{href:"https://packagist.org/packages/laravel-liberu/multitenancy",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://poser.pugx.org/laravel-liberu/multitenancy/license",alt:"License"}}),a("OutboundLink")],1),e._v(" "),a("a",{attrs:{href:"https://packagist.org/packages/laravel-liberu/multitenancy",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://poser.pugx.org/laravel-liberu/multitenancy/downloads",alt:"Total Downloads"}}),a("OutboundLink")],1),e._v(" "),a("a",{attrs:{href:"https://packagist.org/packages/laravel-liberu/multitenancy",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://poser.pugx.org/laravel-liberu/multitenancy/version",alt:"Latest Stable Version"}}),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Multitenancy dependency for "),a("a",{attrs:{href:"https://liberu.co.uk",target:"_blank",rel:"noopener noreferrer"}},[e._v("Laravel Liberu"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"features"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#features","aria-hidden":"true"}},[e._v("#")]),e._v(" Features")]),e._v(" "),a("ul",[a("li",[e._v("contains a series of console commands to help with various operations")]),e._v(" "),a("li",[e._v("comes with a Tenant helper class that can set the active tenant")]),e._v(" "),a("li",[e._v("includes a middleware that should be selectively used on routes as needed,\nwhich sets the active (acting) tenant")]),e._v(" "),a("li",[e._v("provides a set of Jobs that can be used to create/setup/cleanup the tenant's database structure")]),e._v(" "),a("li",[e._v("also includes multiple traits which can be included in your models and classes, as required")])]),e._v(" "),a("h2",{attrs:{id:"conventions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conventions","aria-hidden":"true"}},[e._v("#")]),e._v(" Conventions")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("the name for a tenant's database/schema is going to be the tenant database prefix you set in the .env\n(the "),a("code",[e._v("DB_TENANT_DATABASE")]),e._v(" key) concatenated with the tenant's (company) ID.")]),e._v(" "),a("p",[e._v("If you've setup the "),a("code",[e._v(".env")]),e._v(" as per the Liberu example, the prefix will be "),a("code",[e._v("tenant")]),e._v(" otherwise, the default as\nper the config, is going to be "),a("code",[e._v("forge")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("the migrations for the tenant should be placed in the "),a("code",[e._v("/database/migrations/tenant")]),e._v(" sub-folder.")]),e._v(" "),a("p",[e._v("They will not automatically run during a "),a("code",[e._v("php artisan migrate")]),e._v(" command,\nbut should be run with the "),a("code",[e._v("--path")]),e._v(" argument or by using the respective command or job (see below)")])])]),e._v(" "),a("h2",{attrs:{id:"flow-and-overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flow-and-overview","aria-hidden":"true"}},[e._v("#")]),e._v(" Flow and Overview")]),e._v(" "),a("p",[e._v("The general concept on users, companies and tenants is that users belong to companies and a company\nmay be a tenant.")]),e._v(" "),a("p",[e._v("The designed flow for this package in a multitenant scenario is as follows:")]),e._v(" "),a("ul",[a("li",[e._v("the system (core) application is setup")]),e._v(" "),a("li",[e._v("when a tenant is registered, jobs will be dispatched that create a tenant schema for it and then\nrun migrations which will setup the tables")]),e._v(" "),a("li",[e._v("users are then registered and linked to their respective tenant (company).")]),e._v(" "),a("li",[e._v("after a user logs in through the system application, he can then access the tenant part of the application,\nusing routes that have the "),a("code",[e._v("Multitenancy")]),e._v(" middleware. The middleware will ensure the data that is served is\ntaken from the correct tenant database.")])]),e._v(" "),a("h2",{attrs:{id:"under-the-hood"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#under-the-hood","aria-hidden":"true"}},[e._v("#")]),e._v(" Under the hood")]),e._v(" "),a("h3",{attrs:{id:"classes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#classes","aria-hidden":"true"}},[e._v("#")]),e._v(" Classes")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("Tenant")]),e._v(" class has a "),a("code",[e._v("set($company)")]),e._v(" method which can be used to set that tenant's company\ndatabase.")]),e._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",[e._v("The class is used in the "),a("code",[e._v("Multitenancy")]),e._v(" middleware .")])]),e._v(" "),a("h3",{attrs:{id:"commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commands","aria-hidden":"true"}},[e._v("#")]),e._v(" Commands")]),e._v(" "),a("h4",{attrs:{id:"php-artisan-liberu-tenant-create-database-tenantid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#php-artisan-liberu-tenant-create-database-tenantid","aria-hidden":"true"}},[e._v("#")]),e._v(" php artisan liberu:tenant:create-database {tenantId}")]),e._v(" "),a("p",[e._v("The command creates the database/schema for the given tenant ID.")]),e._v(" "),a("p",[e._v("If the given argument is "),a("code",[e._v("all")]),e._v(" instead of an ID, it will create databases for ALL the tenants.")]),e._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",[e._v("The class uses the "),a("code",[e._v("CreateDatabaseJob")]),e._v(" job to perform the actual database creation")])]),e._v(" "),a("h4",{attrs:{id:"php-artisan-liberu-tenant-drop-database-tenantid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#php-artisan-liberu-tenant-drop-database-tenantid","aria-hidden":"true"}},[e._v("#")]),e._v(" php artisan liberu:tenant:drop-database {tenantId}")]),e._v(" "),a("p",[e._v("The command drops the database/schema for the given tenant ID.")]),e._v(" "),a("p",[e._v("If the given argument is "),a("code",[e._v("all")]),e._v(" instead of an ID, it will drop the databases for ALL the tenants.")]),e._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",[e._v("The class uses the "),a("code",[e._v("DropDatabaseJob")]),e._v(" job to perform the actual database drop.")])]),e._v(" "),a("h4",{attrs:{id:"php-artisan-liberu-tenant-drop-tables-tenantid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#php-artisan-liberu-tenant-drop-tables-tenantid","aria-hidden":"true"}},[e._v("#")]),e._v(" php artisan liberu:tenant:drop-tables {tenantId}")]),e._v(" "),a("p",[e._v("The command drops the tenant's tables for the given tenant ID.")]),e._v(" "),a("p",[e._v("If the given argument is "),a("code",[e._v("all")]),e._v(" instead of an ID, it will drop the tables for ALL the tenants.")]),e._v(" "),a("p",[e._v("As opposed to the previous command which drops the entire schema, this command will drop all tables\nbut preserve the schema.")]),e._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",[e._v("The class uses the "),a("code",[e._v("DropTablesJob")]),e._v(" job to perform the actual tables drop.")])]),e._v(" "),a("h4",{attrs:{id:"php-artisan-liberu-tenant-migrate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#php-artisan-liberu-tenant-migrate","aria-hidden":"true"}},[e._v("#")]),e._v(" php artisan liberu:tenant:migrate")]),e._v(" "),a("p",[e._v("The command will perform the migrations for each tenant.")]),e._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",[e._v("The class uses the "),a("code",[e._v("MigrateJob")]),e._v(" job to perform the actual migration.")])]),e._v(" "),a("h3",{attrs:{id:"middleware"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#middleware","aria-hidden":"true"}},[e._v("#")]),e._v(" Middleware")]),e._v(" "),a("h4",{attrs:{id:"multitenancy-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multitenancy-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Multitenancy")]),e._v(" "),a("p",[e._v("The middleware is meant to be used selectively, only on the routes where it makes sense,\nto dynamically set the user's tenant connection.")]),e._v(" "),a("h3",{attrs:{id:"jobs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jobs","aria-hidden":"true"}},[e._v("#")]),e._v(" Jobs")]),e._v(" "),a("h4",{attrs:{id:"createdatabasejob"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#createdatabasejob","aria-hidden":"true"}},[e._v("#")]),e._v(" CreateDatabaseJob")]),e._v(" "),a("p",[e._v("The job will create the database/schema for a given tenant. Depending on how you've configured your "),a("code",[e._v(".env")]),e._v(" file,\nthe name could look something like "),a("code",[e._v("tenant23")]),e._v(", where 23 is the tenant company id.")]),e._v(" "),a("p",[e._v("The job will run on the "),a("code",[e._v("light")]),e._v(" queue.")]),e._v(" "),a("h4",{attrs:{id:"dropdatabasejob"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dropdatabasejob","aria-hidden":"true"}},[e._v("#")]),e._v(" DropDatabaseJob")]),e._v(" "),a("p",[e._v("The job will drop the database/schema for a given tenant.")]),e._v(" "),a("p",[e._v("The job will run on the "),a("code",[e._v("light")]),e._v(" queue.")]),e._v(" "),a("h4",{attrs:{id:"droptablesjob"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#droptablesjob","aria-hidden":"true"}},[e._v("#")]),e._v(" DropTablesJob")]),e._v(" "),a("p",[e._v("The job will drop the tables of the given tenant. As opposed to the "),a("code",[e._v("DropDatabaseJob")]),e._v(", this job will not\ndrop the database, only the tables.")]),e._v(" "),a("p",[e._v("The job will run on the "),a("code",[e._v("light")]),e._v(" queue.")]),e._v(" "),a("h4",{attrs:{id:"migratejob"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#migratejob","aria-hidden":"true"}},[e._v("#")]),e._v(" MigrateJob")]),e._v(" "),a("p",[e._v("The job will perform the migrations for the given tenant.")]),e._v(" "),a("p",[e._v("The job will run on the "),a("code",[e._v("light")]),e._v(" queue.")]),e._v(" "),a("h3",{attrs:{id:"traits"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#traits","aria-hidden":"true"}},[e._v("#")]),e._v(" Traits")]),e._v(" "),a("h4",{attrs:{id:"systemconnection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#systemconnection","aria-hidden":"true"}},[e._v("#")]),e._v(" SystemConnection")]),e._v(" "),a("p",[e._v("The trait is used on all models that belong to the 'system' (core) connection, in order to dynamically\nset the connection for the model, depending on the environment.")]),e._v(" "),a("p",[e._v("If the environment is "),a("code",[e._v("testing")]),e._v(" then the "),a("code",[e._v("sqlite")]),e._v(" connection is used, otherwise "),a("code",[e._v("system")]),e._v(" is used.")]),e._v(" "),a("h4",{attrs:{id:"systemresolver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#systemresolver","aria-hidden":"true"}},[e._v("#")]),e._v(" SystemResolver")]),e._v(" "),a("p",[e._v("The trait can be used in any class as it provides 2 helper functions:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("systemDatabase()")]),e._v(", will return the system database name")]),e._v(" "),a("li",[a("code",[e._v("systemTable($table)")]),e._v(", will return the full name for given table, such as "),a("code",[e._v("system.states")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"tenantconnection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tenantconnection","aria-hidden":"true"}},[e._v("#")]),e._v(" TenantConnection")]),e._v(" "),a("p",[e._v("The trait is used on all models that belong to the 'tenant' connection, in order to dynamically\nset the connection for the model, depending on the environment.")]),e._v(" "),a("p",[e._v("If the environment is "),a("code",[e._v("testing")]),e._v(" then the "),a("code",[e._v("sqlite")]),e._v(" connection is used, otherwise "),a("code",[e._v("tenant")]),e._v(" is used.")]),e._v(" "),a("h4",{attrs:{id:"tenantresolver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tenantresolver","aria-hidden":"true"}},[e._v("#")]),e._v(" TenantResolver")]),e._v(" "),a("p",[e._v("The trait can be used in any class as it provides 2 helper functions:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tenantDatabase()")]),e._v(", will return the tenant database name")]),e._v(" "),a("li",[a("code",[e._v("tenantTable($table)")]),e._v(", will return the full name for given table, such as "),a("code",[e._v("tenant21.products")]),e._v(".")])])])},[],!1,null,null,null);t.default=s.exports}}]);